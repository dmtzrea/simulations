panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
ylab(label = "Bias") +
geom_hline(data = bias_tables_literature %>%
filter(dataset == k), mapping = aes(yintercept = abs(beta_0)), linetype = 'dashed')  +
geom_text_repel(data = bias_tables_literature %>%
filter(dataset == k), aes(
x = 12, y = abs(beta_0), label = Estimator
),
hjust = 1
) +
guides(label = 'none')
bias_beta_1 = test_final %>% filter(dataset == k) %>%
ggplot(aes(x = degree, y = abs(beta_1))) +
geom_line(aes(group = Estimator, color = Estimator)) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
ylab(label = "Bias") +
geom_hline(data = bias_tables_literature %>%
filter(dataset == k), mapping = aes(yintercept = abs(beta_1)), linetype = 'dashed')  +
geom_text_repel(data = bias_tables_literature %>%
filter(dataset == k), aes(
x = 12, y = abs(beta_1), label = Estimator
),
hjust = 1
) +
guides(label = 'none')
#save plots ----
ggsave(bias_beta_0,
path = paste0("PLOTS/"),
filename = paste0('Bias_beta_0_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"), width = 7, height = 5)
ggsave(bias_beta_1, path = paste0("PLOTS/"),
filename = paste0('Bias_beta_1_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"), width = 7, height = 5)
}
library(ggrepel)
for (k in 1:nrow(matrix)){
# compute plots ----
bias_beta_0 = test_final %>% filter(dataset == k) %>%
ggplot(aes(x = degree, y = abs(beta_0))) +
geom_line(aes(group = Estimator, color = Estimator)) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
ylab(label = "Bias") +
geom_hline(data = bias_tables_literature %>%
filter(dataset == k), mapping = aes(yintercept = abs(beta_0)), linetype = 'dashed')  +
geom_text_repel(data = bias_tables_literature %>%
filter(dataset == k), aes(
x = 12, y = abs(beta_0), label = Estimator
),
hjust = 1
) +
guides(label = 'none')
bias_beta_1 = test_final %>% filter(dataset == k) %>%
ggplot(aes(x = degree, y = abs(beta_1))) +
geom_line(aes(group = Estimator, color = Estimator)) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
ylab(label = "Bias") +
geom_hline(data = bias_tables_literature %>%
filter(dataset == k), mapping = aes(yintercept = abs(beta_1)), linetype = 'dashed')  +
geom_text_repel(data = bias_tables_literature %>%
filter(dataset == k), aes(
x = 12, y = abs(beta_1), label = Estimator
),
hjust = 1
) +
guides(label = 'none')
#save plots ----
ggsave(bias_beta_0,
path = paste0("PLOTS/"),
filename = paste0('Bias_beta_0_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"), width = 7, height = 5)
ggsave(bias_beta_1, path = paste0("PLOTS/"),
filename = paste0('Bias_beta_1_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"), width = 7, height = 5)
}
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom',
'stringr', 'ggrepel'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP7.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
i=230
k=1
H=4
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
omni$coefficients
PHuang
W.W$coeff
W.W_cv$coeff
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
graph(estexp)
sum(Delta)/length(Delta)
graph(estquad)
i=12
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom',
'stringr', 'ggrepel'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP7.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
i=34
k=1
H=4
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
i=12
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom',
'stringr', 'ggrepel'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP7.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
i=12
k=1
H=4
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
omni$coefficients
PHuang
W.W$coeff
W.W_cv$coeff
i=340
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
sum(Delta)/length(Delta)
k=2
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
sum(Delta)/length(Delta)
k=3
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
sum(Delta)/length(Delta)
k=4
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
sum(Delta)/length(Delta)
