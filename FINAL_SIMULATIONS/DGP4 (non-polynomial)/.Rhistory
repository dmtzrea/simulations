2+5
library(roxygen2)
library(Laguerre)
###### MATRIX OF SETTINGS  ##########
matrix = matrix(c(0, 7, 0.5, 200, 500,0, 7, 0.5, 500, 500,0, 7, 0.7, 200, 500,0, 7, 0.7, 500, 500),
nrow = 4, ncol= 5, byrow=TRUE)
colnames(matrix) = c("min", "max", "tau", "n", "N")
h = c(1,2,3,4,5,6,7,8,9,10)
type = c("Hermite", "Hermite")
m=2
m_tilde=2
datasets = list(array(dim = c(200,5,500)) ,array(dim = c(500, 5, 500)), array(dim = c(200, 5, 500)),
array(dim = c(500, 5, 500)))
set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,1)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- rnorm(n,mean=0,sd=1)
X     <- matrix(0,ncol=2,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
epsilon <- (0.2+2*(X[,2]-0.5)^2)*epsilon_raw
T     <- X%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
library(roxygen2)
library(devtools)
remove.packages("Laguerre", lib="~/R/win-library/4.1")
install_local(path = 'C:/Users/Student/Desktop/Laguerre/Laguerre')
library(Laguerre)
warnings()
remove.packages("Laguerre", lib="~/R/win-library/4.1")
getwd()
install.packages('here')
library(here)
here
here()
here()
dirname(rstudioapi::getSourceEditorContext()$path)
## Load Libraries ----
library("abind")
library(foreach)
library(doParallel)
library(dplyr)
library(Laguerre)
library(pracma)
library(tidyr)
library(ggplot2)
library(kableExtra)
library(here)
## SET WD  ----
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
getwd()
getwd()
## Load Libraries ----
library("abind")
library(foreach)
library(doParallel)
library(dplyr)
library(Laguerre)
library(pracma)
library(tidyr)
library(ggplot2)
library(kableExtra)
library(here)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP4.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
getwd()
## Iterative loop ----
for (H in h){
out7 =
foreach(k = 1:(dim(matrix)[1]), .combine = 'cube', .packages = 'abind', .multicombine = TRUE)%:%
foreach(i=1:(dim(datasets[[k]])[3]-498),.packages=c('nloptr','SphericalCubature', 'EQL','orthopolynom',
'quantreg', 'survival', 'Laguerre'),
.combine=rbind) %dopar% {
### setting random seed
set.seed(seeds[which(h==H,arr.ind = TRUE), k, i])
cat("Step ",i," of ",matrix[k,"N"]," from simulation ",k, " ", "h = ", H, "\n")
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
### Collecting the results
c(omni$coefficients,
PHuang,
W.W$coeff,
W.W_cv$coeff,
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))],
adapted$beta,
beta_h$beta,
estexp$beta,estquad$beta, est_id$beta, est_abs$beta,
estexp$H, estquad$H, est_id$H, est_abs$H,
estexp$theta, estquad$theta, est_id$theta, est_abs$theta,
estexp$theta_tilde, estquad$theta_tilde, est_id$theta_tilde, est_abs$theta_tilde)
}
h_list[[which(h==H,arr.ind = TRUE)]] = out7
}
## Save results ----
save(list=c("h_list"), file="results.RData")
true_beta = c(2,1) # CHANGE IF YOU CHANGE THE TRUE MODEL?
bias = vector(mode = "list", length = length(h))
for(i in 1:10){
bias[[i]] = array(dim = c(11, length(true_beta), nrow(matrix)))
for(k in 1:nrow(matrix)){
colnames(h_list[[i]]) = NULL
rownames(h_list[[i]]) = NULL
bias[[i]][,,k] = (h_list[[i]][,1:(11*length(true_beta)),k] %>% colMeans() %>% matrix(ncol = length(true_beta), byrow = TRUE)) -
matrix(true_beta, ncol = length(true_beta), nrow = 11, byrow = TRUE)
}
}
MSE = vector(mode = "list", length = length(h))
for(i in 1:10){
MSE[[i]] = array(dim = c(11, length(true_beta), nrow(matrix)))
for(k in 1:nrow(matrix)){
colnames(h_list[[i]]) = NULL
rownames(h_list[[i]]) = NULL
MSE[[i]][,,k] = ((h_list[[i]][,1:(11*length(true_beta)),k] - matrix(true_beta, nrow = dim(h_list[[i]])[1], ncol = (11*length(true_beta)), byrow = TRUE))^2 %>%
colMeans() %>% matrix(ncol = length(true_beta), byrow = TRUE))
}
}
# SIGMAS COMPUTATION ----
SIGMA_BIG = vector(mode = "list", length = nrow(matrix))
SIGMA = vector(mode = "list", length = length(h))
N = 2 #CHANGE THIS TO 500 FOR REAL SIMULATION
links = list("exp", "quad", link, link2)
for(k in 1:nrow(matrix)){
for(i in 1:10){
SIGMA[[i]] = array(dim = c(dim(datasets[[k]])[1], 5, length(1:N)))
for(n in 1:N){
colnames(h_list[[i]]) = NULL
rownames(h_list[[i]]) = NULL
X_s = as.matrix(datasets[[k]][,2,n])
SIGMA[[i]][,1, n] = X_s
# Compute sigma ----
start = (11*length(true_beta)) + 1 #To fetch the H coefficients.
start_theta = (11*length(true_beta)) + 4*(i + 1) + 1
start_theta_tilde = (11*length(true_beta)) + 4*(i + 1) + 8 + 1
# LOOP OVER THE SIGMA ESTIMATORS
for(l in 1:4){
link_temp = links[[l]]
H = h_list[[i]][n, start:(start + i), k]
start = start + i + 1
theta = h_list[[i]][n, start_theta:(start_theta + 1), k]
start_theta = start_theta + 2
theta_tilde = h_list[[i]][n, start_theta_tilde:(start_theta_tilde + 1), k]
start_theta_tilde = start_theta_tilde + 2
Her = Her(X_s, deg=i, type=type)
if(link_temp == "exp"){
sigma = exp(Her%*%H)/exp(1)
}
if(link_temp=="quad"){
sigma = (Her%*%H)^2
}
if (link_temp!="exp" & link_temp!="quad"){
sigma = as.vector(unlist(lapply(link_temp, function(f) f(Her%*%H))[1]))
dsigma = as.vector(unlist(lapply(link_temp, function(f) f(Her%*%H))[2]))
}
sigma = sigma*sqrt(laguerre_var(theta, theta_tilde, matrix[k, 'tau']))
SIGMA[[i]][,l + 1, n] = sigma
}
}
}
SIGMA_BIG[[k]] = SIGMA
}
# Arrange sigmas in a dataframe
x_s  = as.matrix(datasets[[1]][,2,1])
sigmas = cbind(x_s, (4*cos(1.5*(x_s)))) %>% as.data.frame() %>% # TRUE SIGMA
mutate(type = "true sigma", iter = NA, degree = NA, dataset = NA) %>%
rename(c("x" = "V1", "sigma" = "V2"))
for(k in 1:nrow(matrix)){
for(i in 1:10){
for(n in 1:N){
sigmas_temp = SIGMA_BIG[[k]][[i]][,,n] %>% as.data.frame() %>%
rename(c("x" = "V1", "exp" = "V2", "quad" = "V3", "id" = "V4", "abs" = "V5")) %>%
pivot_longer(cols = exp:abs, names_to = "type", values_to = "sigma") %>%
mutate(iter = n, degree = i, dataset = k) %>%
arrange(type, x)
sigmas = rbind(sigmas, sigmas_temp)
}
}
}
# PLOT AND SAVE IMAGES
# New facet label names for degree variable
labs <- c("Legendre degree 2", "Legendre degree 3", "Legendre degree 4",
"Legendre degree 5", "Legendre degree 6", "Legendre degree 7",
"Legendre degree 8", "Legendre degree 9")
names(labs) <- c("2", "3", "4", "5", "6", "7", "8", "9")
for(link in c("exp", "quad", "id", "abs")){
for(k in 1:4){
ggsave(plot = sigmas %>%
filter(type %in% c("true sigma", link), dataset == k, degree %in% c(2, 3, 4, 5, 6, 7, 8, 9)) %>%
ggplot(aes(x = x, y = sigma, group = iter)) +
geom_line(color = 'gray') +
facet_wrap(degree~., ncol = 2, labeller = labeller(degree = labs)) +
geom_line(data = sigmas %>% filter(type == 'true sigma') %>%
select(-degree), aes(x = x, y = sigma), color = 'black') +
ylim(c(0,30)) +
ylab(label = expression(paste(theta, "(", sigma, ")"))) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")),
path = paste0("PLOTS/"),
filename = paste0('Link function_', link, '_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"),
width = 5,
height = 7
)
}
}
for(link in c("exp", "quad", "id", "abs")){
for(k in 1:4){
ggsave(plot = sigmas %>%
filter(type %in% c("true sigma", link), dataset == k, degree %in% c(2, 3, 4, 5, 6, 7, 8, 9)) %>%
ggplot(aes(x = x, y = sigma, group = iter)) +
geom_line(color = 'gray') +
facet_wrap(degree~., ncol = 2, labeller = labeller(degree = labs)) +
geom_line(data = sigmas %>% filter(type == 'true sigma') %>%
select(-degree), aes(x = x, y = sigma), color = 'black') +
ylim(c(0,1.5)) +
ylab(label = expression(paste(theta, "(", sigma, ")"))) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")),
path = paste0("PLOTS/"),
filename = paste0('Link function_', link, '_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"),
width = 5,
height = 7
)
}
}
for(link in c("exp", "quad", "id", "abs")){
for(k in 1:4){
ggsave(plot = sigmas %>%
filter(type %in% c("true sigma", link), dataset == k, degree %in% c(2, 3, 4, 5, 6, 7, 8, 9)) %>%
ggplot(aes(x = x, y = sigma, group = iter)) +
geom_line(color = 'gray') +
facet_wrap(degree~., ncol = 2, labeller = labeller(degree = labs)) +
geom_line(data = sigmas %>% filter(type == 'true sigma') %>%
select(-degree), aes(x = x, y = sigma), color = 'black') +
ylim(c(0,6)) +
ylab(label = expression(paste(theta, "(", sigma, ")"))) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")),
path = paste0("PLOTS/"),
filename = paste0('Link function_', link, '_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"),
width = 5,
height = 7
)
}
}
matrix
dim(datasets[[2]])[3]
dim(datasets[[1]])[3]
