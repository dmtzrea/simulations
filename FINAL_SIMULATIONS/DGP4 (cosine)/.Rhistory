set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,1)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- runif(n, min = -1, max = 1)
X     <- matrix(0,ncol=3,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
#epsilon <- (ifelse(x_f == 1, cos(X[,2]), 0.5*cos(1.5*X[,2])))*epsilon_raw
epsilon <- (4*cos(1.5*(X[,2])))*epsilon_raw
#epsilon <- ((3.2+3*cos(8*(X[,2]))))*epsilon_raw
T     <- X[,1:2]%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
###### MATRIX OF SETTINGS  ##########
matrix = matrix(c(0, 6.5, 0.5, 200, 500,0, 6.5, 0.5, 500, 500,0, 7.5, 0.7, 200, 500,0, 7.5, 0.7, 500, 500),
nrow = 4, ncol= 5, byrow=TRUE)
colnames(matrix) = c("min", "max", "tau", "n", "N")
h = c(1,2,3,4,5,6,7,8,9,10)
type = c("Legendre")
m=2
m_tilde=2
datasets = list(array(dim = c(200,6,500)) ,array(dim = c(500, 6, 500)), array(dim = c(200, 6, 500)),
array(dim = c(500, 6, 500)))
set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,1)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- runif(n, min = -1, max = 1)
X     <- matrix(0,ncol=3,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
#epsilon <- (ifelse(x_f == 1, cos(X[,2]), 0.5*cos(1.5*X[,2])))*epsilon_raw
epsilon <- (4*cos(1.5*(X[,2])))*epsilon_raw
#epsilon <- ((3.2+3*cos(8*(X[,2]))))*epsilon_raw
T     <- X[,1:2]%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
library(ggplot2)
datasets[[1]][,,1]
datasets[[1]][,,1] %>%
ggplot(aes(x = `[,2]`, y = `[,4]`, color = `[,5]`)) +
geom_point()
library(tidyr)
datasets[[1]][,,1] %>%
ggplot(aes(x = `[,2]`, y = `[,4]`, color = `[,5]`)) +
geom_point()
datasets[[1]][,,1]
datasets[[1]][,,1] %>%
as.data.frame()
datasets[[1]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[2]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[3]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[4]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
###### MATRIX OF SETTINGS  ##########
matrix = matrix(c(0, 6.5, 0.5, 200, 500,0, 6.5, 0.5, 500, 500,0, 7.5, 0.7, 200, 500,0, 7.5, 0.7, 500, 500),
nrow = 4, ncol= 5, byrow=TRUE)
colnames(matrix) = c("min", "max", "tau", "n", "N")
h = c(1,2,3,4,5,6,7,8,9,10)
type = c("Legendre")
m=2
m_tilde=2
datasets = list(array(dim = c(200,6,500)) ,array(dim = c(500, 6, 500)), array(dim = c(200, 6, 500)),
array(dim = c(500, 6, 500)))
set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,3)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- runif(n, min = -1, max = 1)
X     <- matrix(0,ncol=3,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
#epsilon <- (ifelse(x_f == 1, cos(X[,2]), 0.5*cos(1.5*X[,2])))*epsilon_raw
epsilon <- (4*cos(1.5*(X[,2])))*epsilon_raw
#epsilon <- ((3.2+3*cos(8*(X[,2]))))*epsilon_raw
T     <- X[,1:2]%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
fun = function(x){sum(x)/length(x)}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
library(ggplot2)
library(tidyr)
datasets[[1]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[2]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[3]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[4]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
###### MATRIX OF SETTINGS  ##########
matrix = matrix(c(0, 6, 0.5, 200, 500,0, 6, 0.5, 500, 500,0, 7.5, 0.7, 200, 500,0, 7.5, 0.7, 500, 500),
nrow = 4, ncol= 5, byrow=TRUE)
colnames(matrix) = c("min", "max", "tau", "n", "N")
h = c(1,2,3,4,5,6,7,8,9,10)
type = c("Legendre")
m=2
m_tilde=2
datasets = list(array(dim = c(200,6,500)) ,array(dim = c(500, 6, 500)), array(dim = c(200, 6, 500)),
array(dim = c(500, 6, 500)))
set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,3)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- runif(n, min = -1, max = 1)
X     <- matrix(0,ncol=3,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
#epsilon <- (ifelse(x_f == 1, cos(X[,2]), 0.5*cos(1.5*X[,2])))*epsilon_raw
epsilon <- (4*cos(1.5*(X[,2])))*epsilon_raw
#epsilon <- ((3.2+3*cos(8*(X[,2]))))*epsilon_raw
T     <- X[,1:2]%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
###### MATRIX OF SETTINGS  ##########
matrix = matrix(c(0, 6, 0.5, 200, 500,0, 6, 0.5, 500, 500,0, 7, 0.7, 200, 500,0, 7, 0.7, 500, 500),
nrow = 4, ncol= 5, byrow=TRUE)
colnames(matrix) = c("min", "max", "tau", "n", "N")
h = c(1,2,3,4,5,6,7,8,9,10)
type = c("Legendre")
m=2
m_tilde=2
datasets = list(array(dim = c(200,6,500)) ,array(dim = c(500, 6, 500)), array(dim = c(200, 6, 500)),
array(dim = c(500, 6, 500)))
set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,3)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- runif(n, min = -1, max = 1)
X     <- matrix(0,ncol=3,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
#epsilon <- (ifelse(x_f == 1, cos(X[,2]), 0.5*cos(1.5*X[,2])))*epsilon_raw
epsilon <- (4*cos(1.5*(X[,2])))*epsilon_raw
#epsilon <- ((3.2+3*cos(8*(X[,2]))))*epsilon_raw
T     <- X[,1:2]%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
###### MATRIX OF SETTINGS  ##########
matrix = matrix(c(0, 6, 0.5, 200, 500,0, 6, 0.5, 500, 500,0, 6.8, 0.7, 200, 500,0, 6.8, 0.7, 500, 500),
nrow = 4, ncol= 5, byrow=TRUE)
colnames(matrix) = c("min", "max", "tau", "n", "N")
h = c(1,2,3,4,5,6,7,8,9,10)
type = c("Legendre")
m=2
m_tilde=2
datasets = list(array(dim = c(200,6,500)) ,array(dim = c(500, 6, 500)), array(dim = c(200, 6, 500)),
array(dim = c(500, 6, 500)))
set.seed(1234)
for(k in 1:nrow(matrix)){
for (i in 1:dim(datasets[[k]])[3]){
tau  <- matrix[k, 3]
min = matrix[k,"min"]
max = matrix[k,"max"]
n = matrix[k,"n"]
N = matrix[k,"N"]
beta <- c(2,3)
epsilon_raw=rnorm(n, mean=0, sd=1) - qnorm(tau, mean= 0 , sd=1)
x     <- runif(n, min = -1, max = 1)
X     <- matrix(0,ncol=3,nrow=n)
X[,1] <- 1
X[,2] <- x
X_s = as.matrix(X[,2])
#epsilon <- (ifelse(x_f == 1, cos(X[,2]), 0.5*cos(1.5*X[,2])))*epsilon_raw
epsilon <- (4*cos(1.5*(X[,2])))*epsilon_raw
#epsilon <- ((3.2+3*cos(8*(X[,2]))))*epsilon_raw
T     <- X[,1:2]%*%beta+epsilon
C     <- runif(n,min=min,max=max)
Y<- pmin(T,C)
Delta <- as.numeric(T==Y)
datasets[[k]][,,i] = cbind(X, Y, Delta, T)
rm(list=c("tau","min","max","n","N","beta","epsilon_raw","x","X","X_s","epsilon","T",
"C","Y","Delta"))
}
}
rm(list=c("i","k"))
#### array of seeds
seeds = array(1:(length(h)*dim(matrix)[1]*10000), dim=c(length(h), dim(matrix)[1],
10000))
###### FUNCTION TO AGGREGATE THE DIFFERENT ARRAYS ######
###### arguments x and y are arrays here
cube = function(...){
return(abind(..., along=3))
}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
library(ggplot2)
library(tidyr)
datasets[[1]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[2]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[3]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[4]][,,1] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
matrix
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom',
'stringr', 'ggrepel'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP4.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
i=1
k=1
H=4
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
omni$coefficients
PHuang
adapted$beta
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
i=349
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
adapted$beta
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
fun = function(x){sum(x)/length(x)}
datasets[[1]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[2]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[3]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
datasets[[4]][, 5, ] |> apply( MARGIN = 2, FUN = fun) |> mean()
i
datasets[[1]][,,349] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
datasets[[2]][,,349] %>%
as.data.frame() %>%
ggplot(aes(x = V2, y = V4, color = V5)) +
geom_point()
graph(estexp)
graph(estquad)
graph(est_id)
graph(est_abs)
