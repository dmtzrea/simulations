bfeed_pov = laguerre_estimator_het(2,2,3,X,X_s,type=c('Laguerre', 'Laguerre', 'Laguerre'),Y=Y, Delta=Delta, tau=0.5,
verbose = 1, link="exp", trials=trials)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=1,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 1)$beta
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
beta_h
estexp$beta
bfeed_pov$beta
estquad$beta
est_id$beta
est_abs$beta
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
graph(bfeed_pov)
graph(estexp)
graph(estquad)
graph(est_id)
graph(est_abs)
max(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
Y=bfeed$duration
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
min(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
max(runif(200, min=-1, max = 1))
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP5.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
i=300
k=1
H=5
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
graph(est_abs)
matrix
for (H in h){
out7 =
foreach(k = 1:(dim(matrix)[1]), .combine = 'cube', .packages = 'abind', .multicombine = TRUE)%:%
foreach(i=1:(dim(datasets[[k]])[3]),.packages=c('nloptr','SphericalCubature', 'EQL','orthopolynom',
'quantreg', 'survival', 'Laguerre'),
.combine=rbind) %dopar% {
### setting random seed
set.seed(seeds[which(h==H,arr.ind = TRUE), k, i])
cat("Step ",i," of ",matrix[k,"N"]," from simulation ",k, " ", "h = ", H, "\n")
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
### Collecting the results
c(omni$coefficients,
PHuang,
W.W$coeff,
W.W_cv$coeff,
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))],
adapted$beta,
beta_h$beta,
estexp$beta,estquad$beta, est_id$beta, est_abs$beta,
estexp$H, estquad$H, est_id$H, est_abs$H,
estexp$theta, estquad$theta, est_id$theta, est_abs$theta,
estexp$theta_tilde, estquad$theta_tilde, est_id$theta_tilde, est_abs$theta_tilde)
}
h_list[[which(h==H,arr.ind = TRUE)]] = out7
}
i=28
k=1
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
beta_h$beta
estexp$beta
estquad$beta
est_id$beta
est_abs$beta
graph(estexp)
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom'))
install_github("dmtzrea/Laguerre2")
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP5.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
install_github("dmtzrea/Laguerre2")
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP5.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
i=23
k=2
H=4
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
### Collecting the results
c(omni$coefficients,
PHuang,
W.W$coeff,
W.W_cv$coeff,
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))],
adapted$beta,
beta_h$beta,
estexp$beta,estquad$beta, est_id$beta, est_abs$beta,
estexp$H, estquad$H, est_id$H, est_abs$H,
estexp$theta, estquad$theta, est_id$theta, est_abs$theta,
estexp$theta_tilde, estquad$theta_tilde, est_id$theta_tilde, est_abs$theta_tilde)
estexp$beta
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))]
PHuang
estquad$H
estquad$beta
est_id$beta
est_abs$beta
# Function to check libraries----
package_load<-function(packages = NULL, quiet=TRUE,
verbose=FALSE, warn.conflicts=FALSE){
# download required packages if they're not already
pkgsToDownload<- packages[!(packages  %in% installed.packages()[,"Package"])]
if(length(pkgsToDownload)>0)
install.packages(pkgsToDownload, repos="http://cran.us.r-project.org",
quiet=quiet, verbose=verbose)
# then load them
for(i in 1:length(packages))
require(packages[i], character.only=T, quietly=quiet,
warn.conflicts=warn.conflicts)
}
## Load Libraries ----
package_load(c('abind', 'foreach', 'doParallel', 'dplyr', 'devtools', 'pracma',
'tidyr', 'ggplot2', 'kableExtra','quantreg', 'survival',
'orthopolynom', 'EQL', 'nloptr', 'SphericalCubature', 'polynom'))
install_github("dmtzrea/Laguerre2")
library(Laguerre)
## SET WD  ----
# sets wd to the path where this script lives
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP5.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
## Iterative loop ----
for (H in h){
out7 =
foreach(k = 1:(dim(matrix)[1]), .combine = 'cube', .packages = 'abind', .multicombine = TRUE)%:%
foreach(i=1:(dim(datasets[[k]])[3]),.packages=c('nloptr','SphericalCubature', 'EQL','orthopolynom',
'quantreg', 'survival', 'Laguerre'),
.combine=rbind) %dopar% {
### setting random seed
set.seed(seeds[which(h==H,arr.ind = TRUE), k, i])
cat("Step ",i," of ",matrix[k,"N"]," from simulation ",k, " ", "h = ", H, "\n")
X = datasets[[k]][,1:2,i]
Y = datasets[[k]][,4,i]
Delta = datasets[[k]][,5,i]
T = datasets[[k]][,6,i]
X_s = as.matrix(datasets[[k]][,2, i])
tau  <- matrix[k, 3]
# Bandwidth CV
h.vect.WW <- seq(0.05, .5, length=15)
cv.WW     <- NULL
for (j in 1:length(h.vect.WW)){
h.temp <- h.vect.WW[j]
tmp.cv <- WW.cv(Y,X[,2], Delta, nfold=5, h.temp, tau)
cv.WW  <- c(cv.WW, tmp.cv)
}
h.WW  <- h.vect.WW[which.min(cv.WW)]
omni = rq(T~X[,2], tau = tau)
crq = crq(Surv(Y,Delta, type='right')~X[,2], tau=tau, method = "Portnoy")
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
while(estexp$objective %in% c(-Inf, Inf)){
estexp = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="exp"))
}
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
while(estquad$objective %in% c(-Inf, Inf)){
estquad = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link="quad"))
}
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
while(est_id$objective %in% c(-Inf, Inf)){
est_id = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link))
}
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
while(est_abs$objective %in% c(-Inf, Inf)){
est_abs = try(laguerre_estimator_het(m,m_tilde,H,X,X_s,type, Y, Delta, tau,trials=32, verbose=0,link=link2))
}
beta_h = laguerre_estimator_het(m,m_tilde,0, X=X,X_s,type, Y=Y, Delta=Delta, tau=tau,trials=32, verbose = 0)
adapted = MMLQR.cens(Y,Delta,X[,2],tau,h=0.5, beta=c(4,5))
W.W = WW.cens(Y, X[,2], Delta, tau, 0.1)
W.W_cv = WW.cens(Y, X[,2], Delta, tau, h.WW)
PHuang = PH.cens(Y, Delta, tau, X[,2])
### Collecting the results
c(omni$coefficients,
PHuang,
W.W$coeff,
W.W_cv$coeff,
crq$sol[2:3,which.min(abs(tau - crq$sol["tau",]))],
adapted$beta,
beta_h$beta,
estexp$beta,estquad$beta, est_id$beta, est_abs$beta,
estexp$H, estquad$H, est_id$H, est_abs$H,
estexp$theta, estquad$theta, est_id$theta, est_abs$theta,
estexp$theta_tilde, estquad$theta_tilde, est_id$theta_tilde, est_abs$theta_tilde)
}
h_list[[which(h==H,arr.ind = TRUE)]] = out7
save(list=c("h_list"), file="results.RData")
}
## Save results ----
save(list=c("h_list"), file="results.RData")
