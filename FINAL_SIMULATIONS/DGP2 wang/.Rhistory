variances = data %>%
select(all_of(starts_with(substr(items_ord$item, 1, 3))),
CLS_label, -ends_with('0'), -ends_with('r')) %>%
group_by(CLS_label) %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ 100*mean(.x))) %>%
ungroup() %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ var(.x))) %>%
pivot_longer(cols = B201:Z401, values_to = 'variance', names_to = 'item') %>%
arrange(variance)
domains = c("Domein 1: Zorgen bij de elementaire fysiologische functies",
"Domein 2: Zorgen bij de complexe fysiologische functies",
"Domein 3: Gedrag",
"Domein 4: Veiligheid",
"Domein 5: Gezin en familie",
"Domein 6: Gezondheidszorgbeleid")
for(i in domains){
print(
data %>%
select(all_of(starts_with(substr(items_ord$item, 1, 3))),
CLS_label, -ends_with('0'), -ends_with('r')) %>%
group_by(CLS_label) %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ 100*mean(.x))) %>%
ungroup() %>%
pivot_longer(cols = all_of(starts_with(substr(items_ord$item, 1, 3))),
values_to = 'mean', names_to = 'item') %>%
arrange(mean)%>%
mutate(Domein = case_when(substr(item, 1, 1) %in% c("B", "C", "D", "E", "F") ~ "Domein 1: Zorgen bij de elementaire fysiologische functies",
substr(item, 1, 1) %in% c("G", "H", "I", "K", "L", "M", "N") ~ "Domein 2: Zorgen bij de complexe fysiologische functies",
substr(item, 1, 1) %in% c("P", "Q", "R", "S") ~ "Domein 3: Gedrag",
substr(item, 1, 1) %in% c("V") ~ "Domein 4: Veiligheid",
substr(item, 1, 1) %in% c("W") ~ "Domein 5: Gezin en familie",
substr(item, 1, 1) %in% c("Z") ~ "Domein 6: Gezondheidszorgbeleid")) %>%
filter(Domein == i) %>%
ggplot(aes(y = item, x = mean)) +
geom_point(size = 0.7) +
geom_boxplot(alpha = 0, color = "red") +
theme(axis.text.x = element_text(color = ifelse(is.element(variances$item, least_det), "black", "black"),
angle = 90, vjust = 0.5, hjust=1)) +
xlab(' ') +
ylab('Score Percentage') +
xlim(0,100)
)
}
least_det = variances %>% slice_head(n = 10) %>% select(item) %>% unlist()
domains = c("Domein 1: Zorgen bij de elementaire fysiologische functies",
"Domein 2: Zorgen bij de complexe fysiologische functies",
"Domein 3: Gedrag",
"Domein 4: Veiligheid",
"Domein 5: Gezin en familie",
"Domein 6: Gezondheidszorgbeleid")
for(i in domains){
print(
data %>%
select(all_of(starts_with(substr(items_ord$item, 1, 3))),
CLS_label, -ends_with('0'), -ends_with('r')) %>%
group_by(CLS_label) %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ 100*mean(.x))) %>%
ungroup() %>%
pivot_longer(cols = all_of(starts_with(substr(items_ord$item, 1, 3))),
values_to = 'mean', names_to = 'item') %>%
arrange(mean)%>%
mutate(Domein = case_when(substr(item, 1, 1) %in% c("B", "C", "D", "E", "F") ~ "Domein 1: Zorgen bij de elementaire fysiologische functies",
substr(item, 1, 1) %in% c("G", "H", "I", "K", "L", "M", "N") ~ "Domein 2: Zorgen bij de complexe fysiologische functies",
substr(item, 1, 1) %in% c("P", "Q", "R", "S") ~ "Domein 3: Gedrag",
substr(item, 1, 1) %in% c("V") ~ "Domein 4: Veiligheid",
substr(item, 1, 1) %in% c("W") ~ "Domein 5: Gezin en familie",
substr(item, 1, 1) %in% c("Z") ~ "Domein 6: Gezondheidszorgbeleid")) %>%
filter(Domein == i) %>%
ggplot(aes(y = item, x = mean)) +
geom_point(size = 0.7) +
geom_boxplot(alpha = 0, color = "red") +
theme(axis.text.x = element_text(color = ifelse(is.element(variances$item, least_det), "black", "black"),
angle = 90, vjust = 0.5, hjust=1)) +
xlab(' ') +
ylab('Score Percentage') +
xlim(0,100)
)
}
data %>%
select(all_of(starts_with(substr(items_ord$item, 1, 3))),
CLS_label, -ends_with('0'), -ends_with('r')) %>%
group_by(CLS_label) %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ 100*mean(.x))) %>%
ungroup() %>%
pivot_longer(cols = all_of(starts_with(substr(items_ord$item, 1, 3))),
values_to = 'mean', names_to = 'item') %>%
arrange(mean)%>%
mutate(Domein = case_when(substr(item, 1, 1) %in% c("B", "C", "D", "E", "F") ~ "Domein 1: Zorgen bij de elementaire fysiologische functies",
substr(item, 1, 1) %in% c("G", "H", "I", "K", "L", "M", "N") ~ "Domein 2: Zorgen bij de complexe fysiologische functies",
substr(item, 1, 1) %in% c("P", "Q", "R", "S") ~ "Domein 3: Gedrag",
substr(item, 1, 1) %in% c("V") ~ "Domein 4: Veiligheid",
substr(item, 1, 1) %in% c("W") ~ "Domein 5: Gezin en familie",
substr(item, 1, 1) %in% c("Z") ~ "Domein 6: Gezondheidszorgbeleid")) %>%
ggplot(aes(y = item, x = mean)) +
geom_point(size = 0.7) +
geom_boxplot(alpha = 0, color = "red") +
theme(axis.text.x = element_text(color = ifelse(is.element(variances$item, least_det), "black", "black"),
angle = 90, vjust = 0.5, hjust=1)) +
xlab(' ') +
ylab('Score Percentage') +
xlim(0,100)
for(i in domains){
print(
data %>%
select(all_of(starts_with(substr(items_ord$item, 1, 3))),
CLS_label, -ends_with('0'), -ends_with('r')) %>%
group_by(CLS_label) %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ 100*mean(.x))) %>%
ungroup() %>%
pivot_longer(cols = all_of(starts_with(substr(items_ord$item, 1, 3))),
values_to = 'mean', names_to = 'item') %>%
arrange(mean)%>%
mutate(Domein = case_when(substr(item, 1, 1) %in% c("B", "C", "D", "E", "F") ~ "Domein 1: Zorgen bij de elementaire fysiologische functies",
substr(item, 1, 1) %in% c("G", "H", "I", "K", "L", "M", "N") ~ "Domein 2: Zorgen bij de complexe fysiologische functies",
substr(item, 1, 1) %in% c("P", "Q", "R", "S") ~ "Domein 3: Gedrag",
substr(item, 1, 1) %in% c("V") ~ "Domein 4: Veiligheid",
substr(item, 1, 1) %in% c("W") ~ "Domein 5: Gezin en familie",
substr(item, 1, 1) %in% c("Z") ~ "Domein 6: Gezondheidszorgbeleid")) %>%
filter(Domein == i) %>%
ggplot(aes(y = -item, x = mean)) +
geom_point(size = 0.7) +
geom_boxplot(alpha = 0, color = "red") +
theme(axis.text.x = element_text(color = ifelse(is.element(variances$item, least_det), "black", "black"),
angle = 90, vjust = 0.5, hjust=1)) +
xlab(' ') +
ylab('Score Percentage') +
xlim(0,100)
)
}
for(i in domains){
print(
data %>%
select(all_of(starts_with(substr(items_ord$item, 1, 3))),
CLS_label, -ends_with('0'), -ends_with('r')) %>%
group_by(CLS_label) %>%
summarize(across(all_of(starts_with(substr(items_ord$item, 1, 3))), ~ 100*mean(.x))) %>%
ungroup() %>%
pivot_longer(cols = all_of(starts_with(substr(items_ord$item, 1, 3))),
values_to = 'mean', names_to = 'item') %>%
arrange(mean)%>%
mutate(Domein = case_when(substr(item, 1, 1) %in% c("B", "C", "D", "E", "F") ~ "Domein 1: Zorgen bij de elementaire fysiologische functies",
substr(item, 1, 1) %in% c("G", "H", "I", "K", "L", "M", "N") ~ "Domein 2: Zorgen bij de complexe fysiologische functies",
substr(item, 1, 1) %in% c("P", "Q", "R", "S") ~ "Domein 3: Gedrag",
substr(item, 1, 1) %in% c("V") ~ "Domein 4: Veiligheid",
substr(item, 1, 1) %in% c("W") ~ "Domein 5: Gezin en familie",
substr(item, 1, 1) %in% c("Z") ~ "Domein 6: Gezondheidszorgbeleid")) %>%
filter(Domein == i) %>%
ggplot(aes(y = item, x = mean)) +
geom_point(size = 0.7) +
geom_boxplot(alpha = 0, color = "red") +
theme(axis.text.x = element_text(color = ifelse(is.element(variances$item, least_det), "black", "black"),
angle = 90, vjust = 0.5, hjust=1)) +
xlab(' ') +
ylab('Score Percentage') +
xlim(0,100) +
scale_y_discrete(limits = rev(levels(item)))
)
}
install.packages('xfun')
install.packages('rlang')
install.packages("rlang")
install.packages('vctrs')
install.packages('dplyr')
install.packages("dplyr")
install.packages('purrr')
library(haven)
library(dplyr)
library(ggplot2)
library(ggpattern)
library(tidyr)
library(writexl)
library(ggrepel)
library(ggsci)
library(kableExtra)
library(readxl)
library(stringr)
# Data loading ----
memory.limit(size = 400000000000)
`%nin%` = Negate(`%in%`)
library(haven)
library(dplyr)
library(ggplot2)
library(readxl)
data_2021 = read_sas(data_file = 'C:/Users/dzr/Desktop/PROJECTS/Blikvanger_2023/trunk/SAS_CODE/CODE ALL EPISODES AND ITEMS/nrg_new_epibasisnat_2021.sas7bdat')
data_2021 = read_sas(data_file = 'C:/Users/dzr/Desktop/PROJECTS/Blikvanger_2023/trunk/DATA/DATA ALL EPISODES/nrg_new_epibasisnat_2021.sas7bdat')
library(Laguerre)
remove.packages("Laguerre")
library(devtools)
install_github("dmtzrea/Laguerre2")
install_github("dmtzrea/Laguerre2")
library(devtools)
install_github("dmtzrea/Laguerre2")
library(Laguerre)
remove.packages("Laguerre")
library(devtools)
install_github("dmtzrea/Laguerre2")
library(devtools)
install_github("dmtzrea/Laguerre2")
getwd()
## Load Libraries ----
library("abind")
library(foreach)
library(doParallel)
library(dplyr)
library(Laguerre)
library(pracma)
library(tidyr)
library(ggplot2)
library(kableExtra)
library(here)
## SET WD  ----
setwd(dir = dirname(rstudioapi::getSourceEditorContext()$path))
## Find the number of cores in your system ----
clno <- detectCores()
cl   <- makeCluster(clno,outfile="test2")
registerDoParallel(cl)
## LOAD LITERATURE AND DATASETS ----
source(file = "Loading Literature.R")
source(file = "DGP2 Wang.R")
## Identity link ----
id = function(x){return(x)}
idd = function(x){return(x^0)}
link = list(id, idd)
## absolute value link ----
id = function(x){return(abs(x))}
idd = function(x){return(ifelse(x>=0, 1, -1))}
link2 = list(id, idd)
# Initialize list ----
h_list = vector(mode = "list", length = length(h))
load("C:/Users/dzr/Desktop/THESIS/simulations/FINAL_SIMULATIONS/DGP2 wang/results.RData")
true_beta = c(2,1) # CHANGE IF YOU CHANGE THE TRUE MODEL?
bias = vector(mode = "list", length = length(h))
for(i in 1:10){
bias[[i]] = array(dim = c(11, length(true_beta), nrow(matrix)))
for(k in 1:nrow(matrix)){
colnames(h_list[[i]]) = NULL
rownames(h_list[[i]]) = NULL
bias[[i]][,,k] = (h_list[[i]][,1:(11*length(true_beta)),k] %>% colMeans() %>% matrix(ncol = length(true_beta), byrow = TRUE)) -
matrix(true_beta, ncol = length(true_beta), nrow = 11, byrow = TRUE)
}
}
MSE = vector(mode = "list", length = length(h))
for(i in 1:10){
MSE[[i]] = array(dim = c(11, length(true_beta), nrow(matrix)))
for(k in 1:nrow(matrix)){
colnames(h_list[[i]]) = NULL
rownames(h_list[[i]]) = NULL
MSE[[i]][,,k] = ((h_list[[i]][,1:(11*length(true_beta)),k] - matrix(true_beta, nrow = dim(h_list[[i]])[1], ncol = (11*length(true_beta)), byrow = TRUE))^2 %>%
colMeans() %>% matrix(ncol = length(true_beta), byrow = TRUE))
}
}
# SIGMAS COMPUTATION ----
SIGMA_BIG = vector(mode = "list", length = nrow(matrix))
SIGMA = vector(mode = "list", length = length(h))
N = 500 #CHANGE THIS TO 500 FOR REAL SIMULATION
links = list("exp", "quad", link, link2)
for(k in 1:nrow(matrix)){
for(i in 1:10){
SIGMA[[i]] = array(dim = c(dim(datasets[[k]])[1], 5, length(1:N)))
for(n in 1:N){
colnames(h_list[[i]]) = NULL
rownames(h_list[[i]]) = NULL
X_s = as.matrix(datasets[[k]][,2,n])
SIGMA[[i]][,1, n] = X_s
# Compute sigma ----
start = (11*length(true_beta)) + 1 #To fetch the H coefficients.
start_theta = (11*length(true_beta)) + 4*(i + 1) + 1
start_theta_tilde = (11*length(true_beta)) + 4*(i + 1) + 8 + 1
# LOOP OVER THE SIGMA ESTIMATORS
for(l in 1:4){
link_temp = links[[l]]
H = h_list[[i]][n, start:(start + i), k]
start = start + i + 1
theta = h_list[[i]][n, start_theta:(start_theta + 1), k]
start_theta = start_theta + 2
theta_tilde = h_list[[i]][n, start_theta_tilde:(start_theta_tilde + 1), k]
start_theta_tilde = start_theta_tilde + 2
Her = Her(X_s, deg=i, type=type)
if(link_temp == "exp"){
sigma = exp(Her%*%H)/exp(1)
}
if(link_temp=="quad"){
sigma = (Her%*%H)^2
}
if (link_temp!="exp" & link_temp!="quad"){
sigma = as.vector(unlist(lapply(link_temp, function(f) f(Her%*%H))[1]))
dsigma = as.vector(unlist(lapply(link_temp, function(f) f(Her%*%H))[2]))
}
sigma = sigma*sqrt(laguerre_var(theta, theta_tilde, matrix[k, 'tau']))
SIGMA[[i]][,l + 1, n] = sigma
}
}
}
SIGMA_BIG[[k]] = SIGMA
}
# Arrange sigmas in a dataframe
x_s  = as.matrix(datasets[[1]][,2,1])
sigmas = cbind(x_s, (0.2+2*(x_s-0.5)^2)) %>% as.data.frame() %>% # TRUE SIGMA
mutate(type = "true sigma", iter = NA, degree = NA, dataset = NA) %>%
rename(c("x" = "V1", "sigma" = "V2"))
#sample only 100 sigmas (otherwise too slow)
positions = sample(x = 1:500, size = 100, replace = FALSE)
for(k in 1:nrow(matrix)){
for(i in 1:10){
for(n in positions){
sigmas_temp = SIGMA_BIG[[k]][[i]][,,n] %>% as.data.frame() %>%
rename(c("x" = "V1", "exp" = "V2", "quad" = "V3", "id" = "V4", "abs" = "V5")) %>%
pivot_longer(cols = exp:abs, names_to = "type", values_to = "sigma") %>%
mutate(iter = n, degree = i, dataset = k) %>%
arrange(type, x)
sigmas = rbind(sigmas, sigmas_temp)
}
}
print(k)
}
# PLOT AND SAVE IMAGES
# New facet label names for degree variable
labs <- c("Hermite degree 2", "Hermite degree 3", "Hermite degree 4",
"Hermite degree 5", "Hermite degree 6", "Hermite degree 7",
"Hermite degree 8", "Hermite degree 9")
names(labs) <- c("2", "3", "4", "5", "6", "7", "8", "9")
for(link in c("exp", "quad", "id", "abs")){
for(k in 1:4){
ggsave(plot = sigmas %>%
filter(type %in% c("true sigma", link), dataset == k, degree %in% c(2, 3, 4, 5, 6, 7, 8, 9)) %>%
ggplot(aes(x = x, y = sigma, group = iter)) +
geom_line(color = 'gray') +
facet_wrap(degree~., ncol = 2, labeller = labeller(degree = labs)) +
geom_line(data = sigmas %>% filter(type == 'true sigma') %>%
select(-degree), aes(x = x, y = sigma), color = 'black') +
ylim(c(0,30)) +
ylab(label = expression(paste(theta, "(", sigma, ")"))) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")),
path = paste0("PLOTS/"),
filename = paste0('Link function_', link, '_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"),
width = 5,
height = 7
)
}
}
for(link in c("exp", "quad", "id", "abs")){
for(k in 1:4){
ggsave(plot = sigmas %>%
filter(type %in% c("true sigma", link), dataset == k, degree %in% c(2, 3, 4, 5, 6, 7, 8, 9)) %>%
ggplot(aes(x = x, y = sigma, group = iter)) +
geom_line(color = 'gray', size = 0.1) +
facet_wrap(degree~., ncol = 2, labeller = labeller(degree = labs)) +
geom_line(data = sigmas %>% filter(type == 'true sigma') %>%
select(-degree), aes(x = x, y = sigma), color = 'black') +
ylim(c(0,30)) +
ylab(label = expression(paste(theta, "(", sigma, ")"))) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")),
path = paste0("PLOTS/"),
filename = paste0('Link function_', link, '_', 'quantile_', matrix[k, 'tau'], '_',
'Sample_size_', matrix[k, 'n'], ".png"),
width = 5,
height = 7
)
}
}
est_names = c("Omni", "P & W", "W & W", "W & W (CV)",
"Portnoy", "DB et. al.", "Laguerre", "Laguerre H. (exp link)",
"Laguerre H. (quad link)", "Laguerre H. (Id link)", "Laguerre H. (abs link)")
bias_tables = c()
for(i in 1:10){
bias_temp = c()
for(k in 1:nrow(matrix)){
bias_temp2 = bias[[i]][,,k] %>% round(digits = 4) %>% as.data.frame() %>%
mutate(Estimator = est_names, tau = matrix[k, "tau"], n = matrix[k, "n"], degree = i,
dataset = k) %>%
rename(c("beta_0" = "V1", "beta_1" = "V2"))
bias_temp = rbind(bias_temp, bias_temp2)
}
bias_tables = rbind(bias_tables, bias_temp)
}
# TABLES LITERATURE
bias_tables_literature = bias_tables %>%
filter(degree == 1, Estimator %in% c("Omni", "P & W", "W & W", "W & W (CV)",
"Portnoy", "DB et. al.", "Laguerre"))
# apply styling to tables
table1_styled <- kable(bias_tables_literature %>% filter(dataset == 1) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table2_styled <- kable(bias_tables_literature %>% filter(dataset == 2) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table3_styled <- kable(bias_tables_literature %>% filter(dataset == 3) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table4_styled <- kable(bias_tables_literature %>% filter(dataset == 4) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
# combine tables into a grid
table_grid <- cbind(table1_styled, table2_styled, table3_styled, table4_styled)
est_proposed = c("Laguerre H. (exp link)",
"Laguerre H. (quad link)", "Laguerre H. (Id link)", "Laguerre H. (abs link)")
bias_tables_temp = bias_tables %>%
filter(Estimator == 'Laguerre') %>%
mutate(degree = ifelse(Estimator == 'Laguerre', 0, degree)) %>%
arrange(dataset) %>%
group_by(dataset) %>%
slice_head(n = 4) %>%
mutate(Estimator = est_proposed) %>%
ungroup()
bias_tables_proposed = bias_tables %>%
filter(Estimator %in% est_proposed) %>%
bind_rows(bias_tables_temp) %>%
arrange(dataset, Estimator, degree) %>%
pivot_wider(names_from = Estimator, values_from = c(beta_0, beta_1))
bias_tables_proposed = bias_tables_proposed  %>%
select(tau, n, degree, dataset,
ends_with("(Id link)"),
ends_with("(abs link)"),
ends_with("(exp link)"),
ends_with("(quad link)"))
table1 = kable(bias_tables_proposed %>% filter(dataset == 1) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table2 = kable(bias_tables_proposed %>% filter(dataset == 2) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table3 = kable(bias_tables_proposed %>% filter(dataset == 3) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table4 = kable(bias_tables_proposed %>% filter(dataset == 4) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table1
table1_styled
table2_styled
table3_styled
table4_styled
table1
table2
table3
table4
est_names = c("Omni", "P & W", "W & W", "W & W (CV)",
"Portnoy", "DB et. al.", "Laguerre", "Laguerre H. (exp link)",
"Laguerre H. (quad link)", "Laguerre H. (Id link)", "Laguerre H. (abs link)")
mse_tables = c()
for(i in 1:10){
mse_temp = c()
for(k in 1:nrow(matrix)){
mse_temp2 = MSE[[i]][,,k] %>% round(digits = 4) %>% as.data.frame() %>%
mutate(Estimator = est_names, tau = matrix[k, "tau"], n = matrix[k, "n"], degree = i,
dataset = k) %>%
rename(c("beta_0" = "V1", "beta_1" = "V2"))
mse_temp = rbind(mse_temp, mse_temp2)
}
mse_tables = rbind(mse_tables, mse_temp)
}
# TABLES LITERATURE
mse_tables_literature = mse_tables %>%
filter(degree == 1, Estimator %in% c("Omni", "P & W", "W & W", "W & W (CV)",
"Portnoy", "DB et. al.", "Laguerre"))
# apply styling to tables
table1_styled <- kable(mse_tables_literature %>% filter(dataset == 1) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table2_styled <- kable(mse_tables_literature %>% filter(dataset == 2) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table3_styled <- kable(mse_tables_literature %>% filter(dataset == 3) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table4_styled <- kable(mse_tables_literature %>% filter(dataset == 4) %>%
select(-dataset, -degree), "latex", booktabs = T) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
column_spec(1, width = "50px")
table1_styled
table2_styled
table3_styled
table4_styled
est_proposed = c("Laguerre H. (exp link)",
"Laguerre H. (quad link)", "Laguerre H. (Id link)", "Laguerre H. (abs link)")
mse_tables_temp = mse_tables %>%
filter(Estimator == 'Laguerre') %>%
mutate(degree = ifelse(Estimator == 'Laguerre', 0, degree)) %>%
arrange(dataset) %>%
group_by(dataset) %>%
slice_head(n = 4) %>%
mutate(Estimator = est_proposed) %>%
ungroup()
mse_tables_proposed = mse_tables %>%
filter(Estimator %in% est_proposed) %>%
bind_rows(mse_tables_temp) %>%
arrange(dataset, Estimator, degree) %>%
pivot_wider(names_from = Estimator, values_from = c(beta_0, beta_1))
mse_tables_proposed = mse_tables_proposed  %>%
select(tau, n, degree, dataset,
ends_with("(Id link)"),
ends_with("(abs link)"),
ends_with("(exp link)"),
ends_with("(quad link)"))
table1 = kable(mse_tables_proposed %>% filter(dataset == 1) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table2 = kable(mse_tables_proposed %>% filter(dataset == 2) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table3 = kable(mse_tables_proposed %>% filter(dataset == 3) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table4 = kable(mse_tables_proposed %>% filter(dataset == 4) %>%
select(-dataset, -tau, -n), "latex", booktabs = T)
table1
table2
table3
table4
